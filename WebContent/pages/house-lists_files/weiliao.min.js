/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!******************!*\
  !*** multi main ***!
  \******************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./weiliao/weiliaoApp.js */1);
	__webpack_require__(/*! ./weiliao/service/weiliaoUtils.js */2);
	__webpack_require__(/*! ./weiliao/service/weiliaoService.js */3);
	__webpack_require__(/*! ./weiliao/directive/weiliaoWin.js */4);
	__webpack_require__(/*! ./weiliao/directive/chatWin.js */5);
	__webpack_require__(/*! ./weiliao/directive/sessionWin.js */6);
	module.exports = __webpack_require__(/*! ./weiliao/directive/weiliaoDirective.js */7);


/***/ },
/* 1 */
/*!*******************************!*\
  !*** ./weiliao/weiliaoApp.js ***!
  \*******************************/
/***/ function(module, exports) {

	/**
	 * Created by zhangliguang on 16/6/4.
	 */
	
	
	angular.module('weiliaoApp', []).run(['$rootScope', 'weiliaoService', function($rootScope, weiliaoService){
	
	    $rootScope.weiliao = {
	        loginUser: null,
	        clientId: null,
	        isLogin: false,
	        setIsLogin: function(isLogin){
	            this.isLogin = isLogin;
	        },
	        getIsLogin: function(){
	            return this.isLogin;
	        },
	        getLoginUser: function(){
	            return this.loginUser;
	        },
	        setLoginUser: function(loginUser){
	            this.loginUser = loginUser;
	        },
	        getClientId: function(){
	            return this.clientId;
	        },
	        setClientId: function(){
	            this.clientId = '' + (this.loginUser.isAgent ? this.loginUser.agentId : this.loginUser.uid);
	        },
	        leancloudSocket: null,
	        getLeancloudSocket: function(){
	           return this.leancloudSocket;
	        },
	        currentSession: null,
	        getCurrentSession: function(){
	            return this.currentSession;
	        }
	    };
	
	    /* 配置信息 */
	    $rootScope.config = {
	        "test":{//测试
	            appId: "O0J2ghV6gintalF8rlVn0M7f-gzGzoHsz",//凌云appId
	            fsDomain: 'http://fs.dooioo.org' //文件服务器
	        },
	        "integration": {//集成
	            appId: "ex9v5l84hwbsc4isq2h2o228uqvqnrj5dbl9khq6c5q2c5ob",
	            fsDomain: 'http://fs.dooioo.org'
	        },
	        "production": {//生产线
	            appId: "g5bnoa69y41nhqoqp4j7rmjlpedkgtl8h0a9y79ss4rpb7pj",
	            fsDomain: 'http://fs.dooioo.com'
	        }
	    };
	    $rootScope.config["development"] = $rootScope.config["test"];//开发
	    $rootScope.config["publichost"] = window.headerParameters.publichost;
	
	    $rootScope.weiliao.appId = $rootScope.config[headerParameters.env].appId;
	    $rootScope.weiliao.fsDomain = $rootScope.config[headerParameters.env].fsDomain;
	
	    $rootScope.isQiangdaSession = weiliaoService.isQiangdaSession;
	    $rootScope.isQiangdaSessionStart = weiliaoService.isQiangdaSessionStart;
	    $rootScope.isQiangdaSessionProgress = weiliaoService.isQiangdaSessionProgress;
	    $rootScope.isQiangdaSessionSuccess = weiliaoService.isQiangdaSessionSuccess;
	    $rootScope.isQiangdaSessionFail = weiliaoService.isQiangdaSessionFail;
	    $rootScope.getDisplayName = weiliaoService.getDisplayName;
	
	}]).filter('displaySessionName', ['weiliaoService', function(weiliaoService){
	    return function(session, chatHeader){
	
	        if(!session){ return ''; }
	
	        //直接返回用户名称
	        if((!weiliaoService.isQiangdaSession(session) ||
	            weiliaoService.isQiangdaSessionSuccess(session) ||
	            weiliaoService.isQiangdaSessionFinish(session) ) &&
	            session.user){
	            return session.user.displayName;
	        }
	
	        if(weiliaoService.isQiangdaSessionStart(session) || weiliaoService.isQiangdaSessionFail(session)){ //开始抢答或抢答失败
	            return session.qiangda.title;
	        }
	        if(weiliaoService.isQiangdaSessionProgress(session)){
	            var text = '咨询中...';
	            return chatHeader ? text : '[' + text + ']';
	        }
	    };
	}]).filter('formatWorkExperience', function(){
	    return function(workStart){
	        var start = new Date(workStart).getTime(),
	            end = new Date().getTime(),
	            ONE_DAY = 1000 * 60 * 60 * 24,
	            year = Math.floor( (end - start)/ (365 * ONE_DAY) );
	
	        return year < 1 ? '<1年' : year + '-' + (year + 1) + '年';
	    }
	}).filter('displayElipse', function(){
	    var MAX_LEN = 14;
	
	    return function(input) {
	        if(!input) return;
	
	        var len = 0;
	        for (var i = 0; i < input.length; i++) {
	            var c = input.charCodeAt(i);
	            //单字节加1
	            if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
	                len++;
	            }else {
	                len += 2;
	            }
	        }
	        return len > MAX_LEN ? input.slice(0, 6) + '...' : input;
	    }
	})
	


/***/ },
/* 2 */
/*!*****************************************!*\
  !*** ./weiliao/service/weiliaoUtils.js ***!
  \*****************************************/
/***/ function(module, exports) {

	/**
	 * Created by zhangliguang on 16/6/4.
	 */
	
	angular.module('weiliaoApp').factory('weiliaoUtils', ['$filter', function($filter){
	   return {
	       formatChatDate: function(chatTime, isSessionList) {
	           if(!chatTime) return '';
	
	           var thisDate = angular.isNumber(chatTime) ?  new Date(chatTime) : chatTime,
	               nowDate = new Date();
	
	           //不同年份
	           //if (thisDate.getFullYear() != nowDate.getFullYear()) {
	           //    return $filter('date')(chatTime, 'yyyy年MM月dd日 HH:mm');
	           //}
	
	           //不是当天
	           if (thisDate.getMonth() != nowDate.getMonth() || (thisDate.getMonth() == nowDate.getMonth() && thisDate.getDate() != nowDate.getDate())) {
	               var patternStr = isSessionList ? 'MM月dd日' : 'MM月dd日 HH:mm';
	               return $filter('date')(thisDate, patternStr);
	           }
	
	           //当天
	           return $filter('date')(thisDate, 'HH:mm');
	       },
	       moreThanFiveMinute: function(thisChatTime, prevChatTime){
	           if(prevChatTime == null){ return true; }
	
	           var diff = thisChatTime - prevChatTime,
	               FIVE_MINUTE = 5 * 60 * 1000;
	
	           //间隔大于5分钟, 则显示
	           return diff > FIVE_MINUTE;
	       },
	       normalizeDate: function(date){
	           if(typeof date == "string"){
	               var day, tz,
	                   rx = /^(\d{4}\-\d\d\-\d\d([tT ][\d:\.]*)?)([zZ]|([+\-])(\d\d):(\d\d))?$/,
	                   p = rx.exec(date) || [];
	
	               if(p[1]){
	                   day = p[1].split(/\D/);
	                   for(var i= 0, L = day.length; i<L; i++){
	                       day[i] = parseInt(day[i], 10) || 0;
	                   };
	                   day[1] -= 1;
	                   day = new Date(Date.UTC.apply(Date, day));
	                   if(!day.getDate()) return NaN;
	                   if(p[5]){
	                       tz = (parseInt(p[5], 10)*60);
	                       if(p[6]) tz += parseInt(p[6], 10);
	                       if(p[4] == '+') tz *= -1;
	                       if(tz) day.setUTCMinutes(day.getUTCMinutes()+ tz);
	                   }
	                   return day;
	               }
	               return NaN;
	           }else{
	               return angular.isNumber(date) ? new Date(date) : date;
	           }
	       },
	       encodeHTML: function (source) {
	          if(!source) return '';
	           return String(source)
	               .replace(/&/g, '&amp;')
	               .replace(/</g, '&lt;')
	               .replace(/>/g, '&gt;')
	               .replace(/[\r\n]/g,"");
	       },
	       createRoom: function(server, sessionId, callback){
	           server.room(sessionId, function(room) {
	               if (room) {
	                   if(callback) callback(room);
	               }
	           });
	       },
	       myBrowser:function(){
	           var userAgent = navigator.userAgent; //取得浏览器的userAgent字符串
	           var isOpera = userAgent.indexOf("Opera") > -1; //判断是否Opera浏览器
	           var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1 && !isOpera; //判断是否IE浏览器
	           var legalBrower = true;
	           if (isIE) {
	               var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
	               reIE.test(userAgent);
	               var fIEVersion = parseFloat(RegExp["$1"]);
	               if(fIEVersion <= 9.0){       //ie10以下
	                   legalBrower = false;
	               }
	           }
	           return legalBrower;
	       },
	       getLocalStorage: function(name){//获取localstorage的某个值
	           return this.getOldLocalStorage('weiliao_' + name + '_v1');
	       },
	       getOldLocalStorage: function(name){
	           if(!name) return;
	           try{
	               var localstorageInfo = window.localStorage[name];
	               if(!localstorageInfo){
	                   return null;
	               }
	               return JSON.parse(window.localStorage[name]);
	           }catch(e){
	               return null;
	           }
	       },
	       setLocalStorage:function(name, obj){//设置localstorage的某个值
	           name = 'weiliao_' + name + '_v1';
	           try{
	               window.localStorage[name] = JSON.stringify(obj);
	           }catch(e){
	               return ;
	           }
	       },
	       syncLocalUnreadCount: function(clientId, sessionId, unreadCount){
	           var localStore = this.getLocalStorage(clientId);
	           if(!localStore[sessionId]){
	               localStore[sessionId] = this.createDefaultLocalItem(sessionId);
	           }
	           localStore[sessionId].unreadCount = unreadCount;
	           this.setLocalStorage(clientId, localStore);
	       },
	       syncLocalIsDeleted: function(clientId, sessionId, isDeleted){
	           var localStore = this.getLocalStorage(clientId);
	           if(!localStore[sessionId]){
	               localStore[sessionId] = this.createDefaultLocalItem(sessionId);
	           }
	           localStore[sessionId].isDeleted = isDeleted;
	           this.setLocalStorage(clientId, localStore);
	       },
	       syncLocalSession: function(clientId, sessionId, session){
	           var localStore = this.getLocalStorage(clientId);
	           localStore[sessionId] = session;
	           this.setLocalStorage(clientId, localStore);
	       },
	       createDefaultLocalItem: function(sessionId){
	           var newLocalItem = {};
	           newLocalItem[sessionId] = {unreadCount: 0, isDeleted: false};
	
	           return newLocalItem;
	       },
	       isValidUrl: function(url){
	           return !!url.match(/(((^https?:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)$/g);
	       }
	
	} ;
	}]);

/***/ },
/* 3 */
/*!*******************************************!*\
  !*** ./weiliao/service/weiliaoService.js ***!
  \*******************************************/
/***/ function(module, exports) {

	/**
	 * Created by zhangliguang on 16/6/4.
	 */
	
	
	angular.module('weiliaoApp').factory('weiliaoService', ['$filter', '$http', '$timeout', '$rootScope', 'weiliaoUtils', function($filter, $http, $timeout, $rootScope, weiliaoUtils){
	    return {
	        ERSHOUFANG: 'ershoufang',
	        ZUFANG: 'zufang',
	        getCityId: function(){
	            return headerParameters.cityId ? headerParameters.cityId : '310000';
	        },
	        isTextMsg: function(chat){
	            return chat && chat.msg.type == 'text';
	        },
	        isImageMsg: function(chat){
	            return chat && chat.msg.type == 'image';
	        },
	        isPropertyCard: function(chat){
	            return chat && chat.msg.type == 'text' && chat.msg.attr && chat.msg.attr.houseCard;
	        },
	        parseHouseIdFromUrl: function(url){
	            var pattern =  /^(http:\/\/)[a-zA-Z\.\:0-9]+\/((ershoufang)|(zufang))\/[a-zA-Z]+[0-9]+(.html)$/;
	            if(pattern.test(url)){
	                var houseIdSplit = url.slice(url.lastIndexOf('/') + 1, url.lastIndexOf('.')).split(''),
	                    result = [];
	                for(var i= 0,len=houseIdSplit.length; i<len; i++){
	                    if("0123456789".indexOf(houseIdSplit[i]) != -1){
	                        result.push(houseIdSplit[i]);
	                    }
	                }
	                return result.join('');
	            }
	            return '';
	        },
	        parseHouseType: function(url){
	            url = url || '';
	            if(url.indexOf(this.ERSHOUFANG) !== -1){
	                return this.ERSHOUFANG;
	            }
	            if(url.indexOf(this.ZUFANG) !== -1){
	                return this.ZUFANG;
	            }
	        },
	        appAddedProperty: function(isAgent){
	            var result = {'profile': headerParameters.env == "production" ? 'prod' : 'dev'};
	            if(isAgent){
	                result['dest'] = 'online';
	            }
	            return result;
	        },
	        updateSession: function(findIdx, sessionList, lastMsg, lastTime){       //更新会话
	            if(findIdx < 0 || findIdx >= sessionList.length) return;
	
	            var findSession = sessionList[findIdx];
	
	            //设置最新消息和更新时间
	            if(lastMsg){
	                findSession.attr.lastMessage = lastMsg;
	            }
	            if(lastTime){
	                findSession.updatedAt = lastTime;
	            }
	
	            //置顶
	            sessionList.splice(findIdx, 1);
	            sessionList.unshift(findSession);
	        },
	        normalizeChatList: function(chatList){
	            var result = [],
	                chat = null;
	            for(var i= 0, len=(chatList || []).length; i<len; i++){
	                chat = chatList[i];
	                result.push(this.createDisplayChat(chat.fromPeerId, chat.timestamp, this.getTypeMsg(chat)));
	            }
	            return result;
	        },
	        getTypeMsg: function(chat){
	            var msgObj = {
	                "msgId" : encodeURIComponent(chat["msgId"]?chat["msgId"]:chat["id"]),//请求的消息用msgId，推送的消息用id
	                "transient" : chat["transient"]
	            };
	            if(this.isTextMsg(chat)){
	                msgObj.text = chat.msg.text;
	            }
	            if(this.isImageMsg(chat)){
	                msgObj.url = chat.msg.url;
	            }
	            if(this.isPropertyCard(chat)){
	                msgObj.houseCard = chat.msg.attr.houseCard;
	            }
	
	            return msgObj;
	        },
	        createDisplayChat: function(fromPeerId, timestamp, opts){
	            var result = {
	                fromPeerId: fromPeerId,
	                timestamp: timestamp
	            };
	            return angular.extend(result, opts);
	        },
	        isLeave: function(user){        //判断是否离职
	            return user && user.agent && !(user.positionId == 1 && user.status == 1);
	        },
	        isActiveAgent: function(user){  //在职经纪人
	            return user && user.agent && user.positionId == 1 && user.status == 1;
	        },
	        chatRoomScrollToButtom: function(){
	            $timeout(function(){
	                $('div.im-wc-chat').scrollTop($('#print-wall')[0].scrollHeight);
	            });
	        },
	        buildAttr: function (msg, loginUser, currentSession){ //发送消息, 构建自定义属性
	            var result = currentSession.attr || {},
	                sessionUser = currentSession.user;
	
	            if(sessionUser){
	                result.userName = loginUser.isAgent ? sessionUser.displayName : loginUser.userName;
	                result.userAvatar = loginUser.isAgent ? sessionUser.ucAvatar : loginUser.img;
	                result.agentName = loginUser.isAgent ? loginUser.userName : sessionUser.displayName;
	                result.agentAvatar = loginUser.isAgent ? loginUser.img : sessionUser.ucAvatar;
	                result.avatar = loginUser.isAgent ? loginUser.img : sessionUser.ucAvatar;
	            }
	
	            result.lastMessage = msg;
	
	            return result;
	        },
	        computeTotalMsgCount: function(sessionList){
	            if(!sessionList) return 0;
	            var sum = 0;
	            for(var i= 0, len=sessionList.length; i<len; i++){
	                if(!sessionList[i].isDeleted){
	                    sum += sessionList[i].unreadCount || 0;
	                }
	            }
	            return sum;
	        },
	        isNobody: function(sessioinList){
	            if(!sessioinList || sessioinList.length == 0) return true;
	
	            for(var i= 0, len=sessioinList.length; i<len; i++){
	                if(sessioinList[i].isDeleted !== true){
	                    return false;
	                }
	            }
	            return true;
	        },
	        findSessionIdxBySessionId: function(sessionId, sessionList){
	            return this.findSession(sessionId, sessionList, 'sessionId');
	        },
	        findSessionBySessionId: function(sessionId, sessionList){
	            var idx = this.findSession(sessionId, sessionList, 'sessionId');
	            if(idx !== -1){
	                return sessionList[idx];
	            }
	            return null;
	        },
	        findSession: function(code, sessionList, searchType){
	            if(!sessionList || sessionList.length == 0) return -1;
	
	            for(var i= 0, len=sessionList.length; i<len; i++){
	                if(parseCode(sessionList[i], searchType) == code){
	                    return i;
	                }
	            }
	            return -1;
	
	            function parseCode(session, searchType){
	                return searchType == 'sessionId' ? session.objectId : session.user.userCode;
	            }
	        },
	        createQiangdaSession: function(userId, houseSellId, source){
	          return this.makePostRequest('webchat/getGroupConvId?userId=' + userId + '&houseSellId=' + houseSellId + '&client=pc&source=' + source);
	        },
	        startQiangda: function(userId, convId, houseSellId){
	            return this.makePostRequest('webchat/queryEmps?userId=' + userId + '&convId=' + convId + '&houseSellId=' + houseSellId);
	        },
	        finishQiangda: function(convId){
	            return this.makePostRequest('webchat/finishConversation?convId=' + convId);
	        },
	        createNewSession: function(clientId, clickedAgentCode, source, callback){  //res.conv_id
	            return this.makeRequest('webchat/getConvId?userId=' + clientId + '&empCode='+ clickedAgentCode + '&client=pc&source=' + source, callback);
	        },
	        loadSessionList: function(clientId, callback) {    //res.data.result
	            return this.makeRequest('webchat/getConvInfos?clientId=' + clientId + '&client=pc', callback);
	        },
	        loadHouseInfo: function(houseType, houseId, callback){    //res.data
	            if(houseType === this.ERSHOUFANG){
	                return this.makeRequest('webchat/getHouseMsg?key=' + houseId + '&type=1', callback);
	            }else if(houseType === this.ZUFANG){
	                return this.makeRequest('webchat/getRentMsg?houseRentId=' + houseId, callback);
	            }
	            console.log('houseType error: ' + houseType);
	        },
	        loadEmpInfo: function(userCode, callback){
	            return this.makeRequest('agent/getEmpInfo?userCode=' + userCode, callback);
	        },
	        loadClientInfo: function(clientId, sessionId, callback){
	            return this.makeRequest('webchat/getClientUserInfo?clientId=' + clientId + '&objectId=' + sessionId, callback);
	        },
	        makePostRequest: function(urlPart){
	            var params = '&city=' + this.getCityId();
	            return $http.post(headerParameters.apihost + '/api/v4/online/' + urlPart + '&access_token=7poanTTBCymmgE0FOn1oKp' + params);
	        },
	        setHouseCardClicked: function(urlPart, params, callback){//客户点击房源卡片时，记录已查看状态
	            return this.makeRequest(urlPart+params, callback);
	        },
	        makeRequest: function(urlPart, callback){
	            callback = callback || function() {};
	            var params = '&city=' + this.getCityId();
	            return $http.get(headerParameters.apihost + '/api/v4/online/' + urlPart + '&access_token=7poanTTBCymmgE0FOn1oKp' + params).success(function(res){
	                callback(res);
	            });
	        },
	        isQiangdaSession: function(session){      //是否是房源抢答会话
	            return session && session.qiangda !== undefined;
	        },
	        isQiangdaSessionStart: function(session){
	            return session && session.qiangda && session.qiangda.status == 'started';
	        },
	        isQiangdaSessionProgress: function(session){
	            return session && session.qiangda && session.qiangda.status == 'ing';
	        },
	        isQiangdaSessionSuccess: function(session){
	            return session && session.qiangda && session.qiangda.status == 'success';
	        },
	        isQiangdaSessionFinish: function(session){
	            return session && session.qiangda && session.qiangda.status == 'finish';
	        },
	        isQiangdaSessionFail: function(session){
	            return session && session.qiangda && session.qiangda.status == 'fail';
	        },
	        setQiangdaSessionStatus: function(session, status){
	            if(session && session.qiangda){
	                session.qiangda.status = status;
	            }
	        },
	        setQiangDaProgressStatus: function(){   //开始抢答: 调服务器端接口, 设置会话状态为"抢答中"
	            var cs = $rootScope.weiliao.currentSession;
	            if(this.isQiangdaSessionStart(cs)){
	                this.setQiangdaSessionStatus(cs, 'ing');
	
	                this.startQiangda($rootScope.weiliao.getClientId(), cs.objectId, cs.qiangda.houseSellId).error(function(){     //设置"抢答中"失败
	                    this.setQiangdaSessionStatus(cs, 'started');
	                });
	            }
	        },
	        loadUnreadMsgCoungOnInit: function(clientId, sessionList, offlineMsgCountMap){ //先更新localstorage的未读消息数, 然后读取localstorage的消息到sessionList中
	            var oldLocalStore = weiliaoUtils.getOldLocalStorage(clientId),
	                newLocalStore = weiliaoUtils.getLocalStorage(clientId) || {};    //read
	
	
	            //一次性把以前老的未读消息数, 倒入到新的本地存储变量中, 并废弃掉老的本地存储
	            if(oldLocalStore){
	                angular.forEach(oldLocalStore, function(oldSession){
	                    if(!newLocalStore[oldSession.objectId]){
	                        newLocalStore[oldSession.objectId] = {};
	                    }
	                    newLocalStore[oldSession.objectId].unreadCount = oldSession.num;
	                });
	                //删除老的本地存储
	                localStorage.removeItem(clientId);
	            }
	
	            //根据离线消息, 更新未读消息数
	            angular.forEach(sessionList, function(session){
	                //初始化微聊, 同步服务器端消息到localstorage, 本地没有会话, 则新增一个会话
	                if(!newLocalStore[session.objectId]){
	                    newLocalStore[session.objectId] = {};
	                }
	
	                //offline message --> localstorage 有离线消息, 则把离线消息更新到本地存储中
	                if(offlineMsgCountMap && offlineMsgCountMap[session.objectId]){
	                    newLocalStore[session.objectId].unreadCount = (newLocalStore[session.objectId].unreadCount || 0) + offlineMsgCountMap[session.objectId];
	                }
	
	                //localstorage --> sessionList 同步更新内存中的消息数
	                session.unreadCount = newLocalStore[session.objectId].unreadCount || 0;
	            });
	
	            //读完离线消息, 把消息清空掉
	            if(offlineMsgCountMap){
	                for(var p in offlineMsgCountMap){
	                    delete offlineMsgCountMap[p];
	                }
	            }
	            weiliaoUtils.setLocalStorage(clientId, newLocalStore);     //write
	        },
	        removeDeletedSessionOnInit: function(clientId, sessionList){        //初始化, 从服务器端加载的会话列表中, 隐藏标记为删除的会话
	            var localStore = weiliaoUtils.getLocalStorage(clientId);
	
	            for(var objectId in localStore){
	                if(localStore[objectId] && localStore[objectId].isDeleted){
	                    var findIdx = this.findSessionIdxBySessionId(objectId, sessionList);
	                    if(findIdx !== -1){
	                        sessionList[findIdx].isDeleted = true;
	                    }
	                }
	            }
	        },
	        recoverDeletedSessionOnMessage: function(findSession, clientId){        //当收到已删除会话的消息, 则恢复该会话
	            if(!findSession) return;
	
	            if (findSession.isDeleted) {          //之前删除了, 重置为未删除状态
	                findSession.isDeleted = false;
	                weiliaoUtils.syncLocalIsDeleted(clientId, findSession.objectId, false);
	            }
	        }
	    }
	}]);

/***/ },
/* 4 */
/*!*****************************************!*\
  !*** ./weiliao/directive/weiliaoWin.js ***!
  \*****************************************/
/***/ function(module, exports) {

	
	angular.module('weiliaoApp').directive('weiliaoWin', ['$rootScope', 'weiliaoUtils', function($rootScope, weiliaoUtils){
	
	    return {
	        template: '<div class="lianjiaim" ng-class="{\'im-fold\': !helper.isShowWeiliaoPop}" id="weiliaoWrapper" ng-cloak>\
	                        <div class="lianjiaim-shandow clear">\
	                            <div session-win></div>\
	                            <div chat-win></div>\
	                        </div>\
	                    </div>',
	        link: function(scope, el, attrs){
	            window.weiliaoScope = scope;       //用于在非angular环境中, 作为外部调用入口
	
	            /*****  操作  *****/
	            scope.init = function (loginUser){
	                $rootScope.weiliao.setIsLogin(true);
	                $rootScope.weiliao.setLoginUser(loginUser);
	                $rootScope.weiliao.setClientId();
	
	                //创建websocket连接
	                $rootScope.weiliao.leancloudSocket = AV.realtime({
	                    pushOfflineMessages: true,
	                    appId: $rootScope.weiliao.appId,
	                    clientId: $rootScope.weiliao.getClientId(),
	                    secure: weiliaoUtils.myBrowser()
	                },function() {
	                    //通知: 加载会话列表
	                    $rootScope.$broadcast('trigerLoadSessionList');
	                });
	
	                $rootScope.weiliao.getLeancloudSocket().on('message', function (chat) {
	                    //通知: 收到消息
	                    $rootScope.$broadcast('receivedLeanCloudMessage', chat);
	                });
	
	                $rootScope.weiliao.getLeancloudSocket().on('reuse', function (chat) {
	                    $rootScope.$broadcast('connectionException');
	                });
	                $rootScope.weiliao.getLeancloudSocket().on('error', function (chat) {
	                    $rootScope.$broadcast('connectionException');
	                });
	
	            }
	        }
	    };
	}])

/***/ },
/* 5 */
/*!**************************************!*\
  !*** ./weiliao/directive/chatWin.js ***!
  \**************************************/
/***/ function(module, exports) {

	
	angular.module('weiliaoApp').directive('chatWin', ['$rootScope', '$timeout', 'weiliaoService', 'weiliaoUtils', function($rootScope, $timeout, weiliaoService, weiliaoUtils){
	    return {
	        scope: true,
	        replace: true,
	        template: '<div class="lianjiaim-window" ng-if="helper.isShowChatList" ng-class="{\'im-offline\': isLeave(currentSession.user), \'im-online\': !isLeave(currentSession.user)}" >\
	                        <div class="lianjiaim-wintitle">\
	                            <i>在线</i>\
	                            <span class="im-wt-name" ng-if="!isActiveAgent(currentSession.user)" title="{{currentSession | displaySessionName:true}}">{{currentSession | displaySessionName:true | displayElipse}}</span>\
	                            <a ng-if="isActiveAgent(currentSession.user)" ng-href="{{publichost}}/jingjiren/detail/{{currentSession.user.clientId}}.html" target="_blank" class="im-wt-name" title="{{currentSession | displaySessionName:true}}">{{currentSession | displaySessionName:true | displayElipse}}</a>\
	                            <a href="javascript:;" class="im-wt-closebtn" title="关闭" ng-click="helper.isShowChatList=false">关闭</a>\
	                        </div>\
	                        <div class="lianjiaim-wincont">\
	                            <div class="im-wc-hint" style="display: {{(isLeave(currentSession.user) || helper.isLeancloudException || isQiangdaSessionStart(currentSession) || isQiangdaSessionProgress(currentSession)) && \'block\' || \'none\'}};" ng-class="{\'qiangda-tips-bar\': isQiangdaSessionStart(currentSession) || isQiangdaSessionProgress(currentSession)}">\
	                                <span class="agentContent">\
	                                    <span>{{buildTipsText(currentSession)}}</span>\
	                                </span>\
	                                <a href="javascript:;" class="im-wt-closebtn2" title="关闭" style="display: none">关闭</a>\
	                            </div>\
	                            <div class="im-wc-chat" style="height: {{(isLeave(currentSession.user) || helper.isLeancloudException || isQiangdaSessionStart(currentSession) || isQiangdaSessionProgress(currentSession)) && \'230\' || \'270\'}}px;">\
	                                <p class="chat-tophint">聊天的时候，经纪人无法知道您的手机号！</p>\
	                                <ul class="print-wall" id="print-wall" chat-list list="chatList"></ul>\
	                                <div class="qiangda-fail-tips" ng-if="isQiangdaSessionFail(currentSession)">系统消息: 抱歉, 咨询暂无回答，您可以联系推荐的经纪人或直接拨打电话。</div>\
	                            </div>\
	                        </div>\
	                        <div class="im-wc-input">\
	                            <div class="im-input-container" data-role="im-input-container">\
	                                <textarea id="input-send" placeholder="点击输入您想要咨询的问题…" ng-model="model.inputMsg" autofocus="autofocus" spellcheck="false" ng-disabled="cannotSendMessage(currentSession)" input-enter="sendMsg()"></textarea>\
	                                <div ng-hide="cannotSendMessage(currentSession)">\
	                                    <div file-uploader current-room="currentRoom" clist="chatList"></div>\
	                                </div>\
	                            </div>\
	                            <div class="im-btn-container">\
	                                <span style="display: inline-block;width: 275px;height: 25px;margin-top: 10px;" ng-if="helper.cityId == \'310000\'">\
	                                    <a href="/client?source=pcwl" target="_blank">\
	                                        <img ng-src="{{publichost}}/public/img/weiliao/weiliao_guanggao_new.png" style="width:100%;height: 100%;">\
	                                    </a>\
	                                </span>\
	                                <input type="button" value="发送" ng-click="sendMsg()" ng-class="{\'btn-disabled\': cannotSendMessage(currentSession)}">\
	                            </div>\
	                        </div>\
	                    </div>',
	        link: function(scope, el, attrs){
	
	            scope.publichost = $rootScope.config["publichost"];
	            scope.isActiveAgent = weiliaoService.isActiveAgent;
	
	            scope.chatList = null;
	            scope.brokerInfo = null;
	            scope.model = {
	                inputMsg: null
	            };         //绑定输入信息
	
	            scope.helper = {
	                isSendingMsg: false,
	                isShowChatList: false,
	                isLeancloudException: false,
	                cityId: headerParameters.cityId
	            };
	
	            //加载聊天记录
	            //入口: 点击某一个会话, 点击联系经纪人, 点击咨询此房源
	            scope.$on('trigerLoadChatList', loadChatList);
	
	            //收到消息, 入口: 收到leancloud消息
	            scope.$on('receivedLeanCloudMessage', function($event, chat){
	                $timeout(function(){ processReceiveMessage(chat); });
	            });
	
	            //leancloud连接异常
	            scope.$on('connectionException', function($event){
	                $timeout( function() { scope.helper.isLeancloudException = true; } );
	            });
	
	            //关闭聊天列表窗口并清空聊天内容
	            //入口: 点击微聊窗口头部的咨询经纪人
	            scope.$on('clickWeiliaoHeader', processClickWeiliaoHeader);
	
	
	            //删除会话
	            scope.$on('deleteSessionSuccess', function($event, sessionId){
	                if($rootScope.weiliao.currentSession && $rootScope.weiliao.currentSession.objectId == sessionId){
	                    scope.helper.isShowChatList = false;
	                }
	            });
	
	            //抢答成功, 重新加载经纪人卡片
	            // scope.$on('triggerLoadBrokerCard', function($event, session) {
	            //     loadBrokerCard(session);
	            // });
	
	            scope.$watch('helper.isShowChatList', function(isShowChatList){
	                if(!isShowChatList){
	                    $rootScope.weiliao.currentSession = null;
	                    scope.chatList = [];
	                }
	            });
	
	            //发送消息
	            scope.sendMsg = sendMsg;
	
	            //判断是否可以发消息
	            scope.cannotSendMessage = function(s){
	                if(!s) return false;
	                return weiliaoService.isQiangdaSessionFail(s) || weiliaoService.isLeave(s.user) || scope.helper.isLeancloudException;
	            };
	
	            //构建聊天框中的提示消息
	            scope.buildTipsText = function(s){
	                if(!s) return '';
	
	                if(scope.helper.isLeancloudException){
	                    return '服务器正在重连，请耐心等待。。。';
	                }
	                if(weiliaoService.isQiangdaSessionStart(s) || weiliaoService.isQiangdaSessionProgress(s)){
	                    return '您的咨询将会在5分钟之内得到回复，请注意消息提醒。';
	                }
	                if(weiliaoService.isLeave(s.user)){
	                    return '已转岗或离职，请联系其他经纪人';
	                }
	                return '';
	            };
	
	
	            //判断是否离职
	            scope.isLeave = weiliaoService.isLeave;
	            //判断是否抢答失败
	            scope.isQiangdaSessionFail = weiliaoService.isQiangdaSessionFail;
	
	
	            function loadChatList($event, session){
	                scope.currentSession = session;
	                scope.helper.isShowChatList = true;
	                scope.helper.isLeancloudException = false;
	
	                //抢答会话 && 状态为"抢答成功" --> 设置抢答会话状态为"finished"
	                if(weiliaoService.isQiangdaSession($rootScope.weiliao.currentSession) &&
	                    weiliaoService.isQiangdaSessionSuccess($rootScope.weiliao.currentSession)){
	                    //调后端接口: 设置抢答会话为"finished"
	
	                    weiliaoService.finishQiangda($rootScope.weiliao.currentSession.objectId).success(function(res){
	                        if(res && res.status == 'ok'){
	                            weiliaoService.setQiangdaSessionStatus($rootScope.weiliao.currentSession, 'finish');
	                        }
	                    });
	                }
	
	                //加载聊天记录
	                weiliaoUtils.createRoom($rootScope.weiliao.getLeancloudSocket(), session.objectId, function(room){
	                    $rootScope.currentRoom = room;
	                    scope.currentRoom = room;
	                    // 获取聊天历史
	                    room.log(function (chatList) {
	                        $timeout(function() {
	                            scope.chatList = weiliaoService.normalizeChatList(chatList);
	                            weiliaoService.chatRoomScrollToButtom();
	                        });
	                    });
	                });
	
	                //加载经纪人卡片信息
	                //loadBrokerCard(scope.currentSession);
	            }
	
	            //处理接收消息
	            function processReceiveMessage(chat){
	                if(chat["transient"]){//如果是暂态消息，则不处理
	                    return false;
	                }
	                if(scope.helper.isShowChatList && chat.cid == $rootScope.weiliao.currentSession.objectId){     //聊天列表是展开的, 同时收到的消息来自当前会话
	                    pushMessage(chat.fromPeerId, chat.timestamp, weiliaoService.getTypeMsg(chat));
	                }
	            }
	
	
	            //处理点击微聊顶部条
	            function processClickWeiliaoHeader($event, isShowWeiliaoPop){
	                if(!isShowWeiliaoPop){
	                    scope.helper.isShowChatList = false;
	                    scope.chatList = [];
	                }
	            }
	
	            function sendMsg(){
	                if(scope.helper.isSendingMsg || scope.cannotSendMessage($rootScope.weiliao.currentSession)) return;
	
	                var normalizedMsg = weiliaoUtils.encodeHTML(scope.model.inputMsg);
	                if(!normalizedMsg) return;
	
	                scope.helper.isSendingMsg = true;
	
	                //leancloud发送消息
	                var houseId = weiliaoService.parseHouseIdFromUrl(window.location.href),
	                    houseType = weiliaoService.parseHouseType(window.location.href);
	                if(isFirstChat()){
	                    if(houseId){
	                        sendPropertyCardMsg(houseType, houseId, function(){
	                            send(normalizedMsg);
	                            weiliaoService.setQiangDaProgressStatus();
	                        });
	                    }else{
	                        send(normalizedMsg);
	                        weiliaoService.setQiangDaProgressStatus();
	                    }
	                }else{
	                    send(normalizedMsg);
	                }
	
	                function send(msg){
	                    var houseId = weiliaoService.parseHouseIdFromUrl(msg),
	                        houseType = weiliaoService.parseHouseType(msg);
	                    if(houseId){    //房源卡片消息
	                        sendPropertyCardMsg(houseType, houseId);
	                    }else{          //文本消息
	                        sendPlainMsg(msg);
	                    }
	                }
	
	                //第一次聊天
	                function isFirstChat(){
	                    return (!scope.chatList || scope.chatList.length == 0);
	                }
	            }
	
	
	            //文本消息
	            function sendPlainMsg(msg){
	                sendMsgBase(msg, weiliaoService.appAddedProperty(), function(res){
	                    updateSessionAndChatListOnSendMsg(msg, res.t, {text: msg});
	                });
	            }
	
	            //房源卡片消息
	            function sendPropertyCardMsg(houseType, houseId, callback){
	                weiliaoService.loadHouseInfo(houseType, houseId, function(houseInfo) {
	
	                    //加载房源卡片出错
	                    if(houseInfo.errno === -100){
	                        sendPlainMsg(weiliaoUtils.encodeHTML(scope.model.inputMsg));
	                        return;
	                    }
	
	                    //正常加载房源卡片
	                    var appPro = weiliaoService.appAddedProperty(),
	                        msg = '[房源卡片]';
	                    appPro.houseCard = houseInfo.data;
	
	                    sendMsgBase(msg, appPro, function (res) {
	                        updateSessionAndChatListOnSendMsg(msg, res.t, {houseCard: appPro.houseCard});
	                        if(callback){ callback(res); }
	                    });
	                });
	            }
	
	            function sendMsgBase(msg, customeAttr, postCallback){
	                postCallback = postCallback || function() {};
	
	                scope.currentRoom.send({
	                    text: msg,
	                    attr: customeAttr
	                }, {type: 'text'}, function (res) {
	                    scope.currentRoom.update({
	                        attr: weiliaoService.buildAttr(msg, $rootScope.weiliao.getLoginUser(), $rootScope.weiliao.currentSession)
	                    }, function() {
	                        scope.$apply(function(){
	                            //清空输入框
	                            scope.model.inputMsg = '';
	                            scope.helper.isSendingMsg = false;
	                            postCallback(res);
	                        });
	                    });
	                });
	            }
	
	            //发送消息
	            function updateSessionAndChatListOnSendMsg(sessionLastMsg, updateTime, chatMsg){
	                $rootScope.$broadcast('sendMessageAndUpdateSession', sessionLastMsg, updateTime);
	                pushMessage($rootScope.weiliao.getClientId(), updateTime, chatMsg);
	            }
	
	            function pushMessage(fromPeerId, updateTime, chatMsg){
	                scope.chatList.push(weiliaoService.createDisplayChat(fromPeerId, updateTime, chatMsg));
	                weiliaoService.chatRoomScrollToButtom();
	            }
	
	            //加载经纪人卡片
	            // function loadBrokerCard(currentSession){
	            //     if(!currentSession || !currentSession.user) return;
	
	            //     weiliaoService.loadEmpInfo(currentSession.user.userCode, function(res){
	            //         $rootScope.brokerInfo = res.data;
	            //     });
	            // }
	        }
	    }
	}]);

/***/ },
/* 6 */
/*!*****************************************!*\
  !*** ./weiliao/directive/sessionWin.js ***!
  \*****************************************/
/***/ function(module, exports) {

	angular.module('weiliaoApp').directive('sessionWin', ['$rootScope', '$timeout', 'weiliaoService', 'weiliaoUtils', function($rootScope, $timeout, weiliaoService, weiliaoUtils){
	    return {
	        scope: true,
	        replace: true,
	        template: '<div class="lianjiaim-wrap">\
	                        <div class="lianjiaim-head" ng-click="clickWeiliaoHeader()">\
	                            <span>咨询经纪人</span>\
	                            <span class="lianjiaim-head-num" ng-if="computeTotalMsgCount(sessionList) > 0">{{computeTotalMsgCount(sessionList)}}</span>\
	                            <a class="lianjiaim-head-closebtn" title="收起" ng-if="helper.isShowWeiliaoPop">收起</a>\
	                        </div>\
	                        <div class="lianjiaim-body" style="position: relative">\
	                            <ul ng-if="helper.isShowWeiliaoPop && weiliao.isLogin">\
	                                <li ng-repeat="session in sessionList | filter:sessionFilter" ng-class="{\'lianjiaim-bg-grey\': weiliao.currentSession.objectId == session.objectId}">\
	                                    <div session-info  session-list="sessionList" session="session" ng-click="$parent.clickSession(session)"></div>\
	                                </li>\
	                            </ul>\
	                            <div class="lianjiaim-noagent" ng-if="!weiliao.isLogin">\
	                                <div class="noagent-sub">您还没有登陆,先去登陆/注册吧</div>\
	                                <div><a href="javascript:;" class="js_login" ng-click="doLogin()">登录/注册</a></div>\
	                            </div>\
	                            <svg xmlns="http://www.w3.org/2000/svg" style="position:absolute;width:100px;heigth:20px;left: 50%;top:50%;transform: translate(-50%,-50%);" ng-if="helper.loading && weiliao.isLogin && !sessionList">\
	                                <circle cx="10" cy="50" r="0" stroke="none" fill="#009de8">\
	                                    <animate attributeName="r" values="0;10;0" keyTimes="0;.5;1" begin="0s" dur="1.4s" repeatCount="indefinite"/>\
	                                </circle>\
	                                <circle cx="40" cy="50" r="0" stroke="none" fill="#009de8">\
	                                    <animate attributeName="r" values="0;10;0" keyTimes="0;.5;1" begin=".2s" dur="1.4s" repeatCount="indefinite"/>\
	                                </circle>\
	                                <circle cx="80" cy="50" r="0" stroke="none" fill="#009de8">\
	                                    <animate attributeName="r" values="0;10;0" keyTimes="0;.5;1" begin=".5s" dur="1.4s" repeatCount="indefinite"/>\
	                                </circle>\
	                            </svg>\
	                            <div class="lianjiaim-noagent-nobody" ng-if="isNobody(sessionList) && weiliao.isLogin && !helper.loading">\
	                                <div class="noagent-title">没有聊过的经纪人</div>\
	                                <div class="noagent-sub">不暴露手机号在线咨询经纪人</div>\
	                            </div>\
	                        </div>\
	                    </div>',
	        link: function(scope, el, attrs){
	
	            scope.sessionList = null;
	            scope.offlineMsgCountMap = {};
	
	            scope.helper = {
	                loading: true,
	                isShowWeiliaoPop: false,
	                isCreatingSession: false        //正在创建会话
	            };
	
	            //加载会话列表, 入口: 页面初始化, 创建会话, 接收抢答消息
	            scope.$on('trigerLoadSessionList', loadSessionList);
	
	            //收到消息, 入口: 收到leancloud消息
	            scope.$on('receivedLeanCloudMessage', function($event, chat){
	                $timeout(function(){ processReceiveMessage(chat); });
	            });
	
	            //发送消息, 更新当前会话的最后消息内容, 入口: 当前用户发送消息
	            scope.$on('sendMessageAndUpdateSession', processSendMessage);
	
	
	            //联系经纪人入口
	            $(document).on('click','.lianjiaim-createtalkAll, .lianjiaim-createtalk, .lianjiaim-createtalkOld', function () {
	                $timeout(function() { linkAgent($(this).attr('usercode'), $(this).attr('source')); }.bind(this));
	            });
	
	            //创建抢答会话入口
	            $(document).on('click','.js_imBtnQiangda', function(){
	                $timeout(function() { qiangdaHouse($(this).attr('houseSellId'), $(this).attr('source')); }.bind(this));
	            });
	
	            //触发加载聊天列表
	            scope.clickSession = function(session){
	                session.unreadCount = 0;
	                $rootScope.weiliao.currentSession = session;
	                weiliaoUtils.syncLocalUnreadCount($rootScope.weiliao.getClientId(), session.objectId, 0);
	
	                $rootScope.$broadcast('trigerLoadChatList', session);
	            };
	
	            //点击微聊弹框头部
	            scope.clickWeiliaoHeader = function(){
	                scope.helper.isShowWeiliaoPop = !scope.helper.isShowWeiliaoPop;
	                if(!scope.helper.isShowWeiliaoPop){
	                    $rootScope.weiliao.currentSession = null;
	                }
	                $rootScope.$broadcast('clickWeiliaoHeader', scope.helper.isShowWeiliaoPop);
	            };
	
	            //登录操作
	            scope.doLogin = function(){
	                $('#dialog, #loginOverlay').show();
	            };
	
	            scope.$watch('helper.isShowWeiliaoPop', function(isShowWeiliaoPop){
	                isShowWeiliaoPop ? $('#weiliaoWrapper').removeClass('im-fold') : $('#weiliaoWrapper').addClass('im-fold');
	            });
	
	            scope.sessionFilter = function(s){
	                //已删除的会话
	                if(s.isDeleted){
	                    return false;
	                }
	
	                //登录人为经纪人同时为抢答会话, 同时状态不是为success和finish
	                if($rootScope.weiliao.getLoginUser().isAgent && weiliaoService.isQiangdaSession(s)){      //登录用户为经纪人同时是抢答会话
	                    if(!weiliaoService.isQiangdaSessionSuccess(s) && !weiliaoService.isQiangdaSessionFinish(s)){
	                        return false;
	                    }
	                }
	
	                return true;
	            };
	
	            scope.isNobody = weiliaoService.isNobody;
	            scope.computeTotalMsgCount = weiliaoService.computeTotalMsgCount;
	
	            //加载会话列表
	            function loadSessionList(){
	                scope.helper.loading = true;
	
	                return weiliaoService.loadSessionList($rootScope.weiliao.getClientId()).success(function(res){
	                    scope.sessionList = res.data.results;
	
	                        //加载未读消息
	                        weiliaoService.loadUnreadMsgCoungOnInit($rootScope.weiliao.getClientId(), scope.sessionList, scope.offlineMsgCountMap);
	                        //隐藏已被删除的会话
	                        weiliaoService.removeDeletedSessionOnInit($rootScope.weiliao.getClientId(), scope.sessionList);
	
	                        scope.helper.loading = false;
	                    }).error(function(){
	                        scope.helper.loading = false;
	                    });
	            }
	
	
	            //处理接收消息
	            function processReceiveMessage(chat){
	                //console.log('chat==>', chat);
	
	                //初始化接收离线消息(用于统计消息数)
	                if(chat.offline){
	                    var sId = chat.cid;
	                    if(scope.offlineMsgCountMap[sId] !== undefined){
	                        scope.offlineMsgCountMap[sId] = (scope.offlineMsgCountMap[sId] || 0) + 1;
	                    }else{
	                        scope.offlineMsgCountMap[sId] = 1;
	                    }
	                    //console.log('offlineMsgCountMap==>', scope.offlineMsgCountMap);
	                }
	
	                //在线消息
	                if (chat.fromPeerId != $rootScope.weiliao.getClientId() && !chat.offline) {
	
	                    var sessionIdOfMsg = chat.cid,
	                        fromPeerIdOfMsg = chat.fromPeerId,
	                        sessionLastMsg = chat.msg.text,
	                        updateTime = chat.timestamp,
	                        findIdx = weiliaoService.findSessionIdxBySessionId(sessionIdOfMsg, scope.sessionList);
	
	                    //会话不存在: 新增一个会话
	                    if( findIdx == -1) {
	                        loadSessionList().success(function(){
	                            var idx = weiliaoService.findSessionIdxBySessionId(sessionIdOfMsg, scope.sessionList);
	                            if(idx !== -1){
	                                setUnreadCount(sessionIdOfMsg, scope.sessionList[idx]);
	                            }
	                        });
	                        return;
	                    }
	
	                    //会话存在: 更新会话信息
	                    weiliaoService.recoverDeletedSessionOnMessage(scope.sessionList[findIdx], $rootScope.weiliao.getClientId());
	                    weiliaoService.updateSession(findIdx, scope.sessionList, sessionLastMsg, updateTime);
	                    var topSession = scope.sessionList[0];
	                    setUnreadCount(sessionIdOfMsg, topSession);
	
	                    //处理抢答会话
	                    if(weiliaoService.isQiangdaSession(topSession) && weiliaoService.isQiangdaSessionProgress(topSession)){
	                       if(chat.fromPeerId == 'sys'){    //抢答失败
	                           weiliaoService.setQiangdaSessionStatus(topSession, 'fail');
	                       }else{       //抢答成功
	                           //加载头像信息
	                           if(topSession.attr){
	                               topSession.attr.isQuery = 'false';
	                           }
	
	                           weiliaoService.loadClientInfo(fromPeerIdOfMsg, sessionIdOfMsg, function(res){
	                               topSession.user = res.user;
	                               weiliaoService.setQiangdaSessionStatus(topSession, 'success');
	                               //$rootScope.$broadcast('triggerLoadBrokerCard', topSession);//经纪人卡片
	                           });
	                       }
	                    }
	                }
	
	                //要考虑多窗口情况, 并且有的窗口的聊天框是打开的, 有些框是关闭的
	                function setUnreadCount(sessionIdOfMsg, session){
	                    //消息不是来自当前会话, 则更新消息数
	                    if($rootScope.weiliao.currentSession == null || sessionIdOfMsg != $rootScope.weiliao.currentSession.objectId){
	                        session.unreadCount = (session.unreadCount || 0) + 1;
	                        weiliaoUtils.syncLocalUnreadCount($rootScope.weiliao.getClientId(), sessionIdOfMsg, session.unreadCount);
	                    }
	
	                    //聊天窗口打开, 同时收到的消息来自当前会话, 则始终设置localstorage中的未读消息数为0(主要处理有多个窗口并且有其他窗口聊天框没有打开的情况)
	                    if($rootScope.weiliao.currentSession != null && sessionIdOfMsg == $rootScope.weiliao.currentSession.objectId){
	                        var timer = setTimeout(function(){
	                            weiliaoUtils.syncLocalUnreadCount($rootScope.weiliao.getClientId(), sessionIdOfMsg, 0);
	                            clearTimeout(timer);
	                        }, 1000);
	                    }
	                }
	            }
	
	            //处理发送消息
	            function processSendMessage($event, sessionLastMsg, updateTime){
	                var findIdx = weiliaoService.findSessionIdxBySessionId($rootScope.weiliao.currentSession.objectId, scope.sessionList);
	                weiliaoService.updateSession(findIdx, scope.sessionList, sessionLastMsg, updateTime);
	            }
	
	            //客户点击联系经纪人
	            function linkAgent(clickedAgentCode, source){
	                //自己不能跟自己聊天
	                if($rootScope.weiliao.getClientId() == clickedAgentCode){ return ; }
	
	                createNewSessionBase(function(){
	                    return weiliaoService.createNewSession($rootScope.weiliao.getClientId(), clickedAgentCode, source);
	                });
	            }
	
	            //咨询房源入口
	            function qiangdaHouse(houseId, source){
	                //判断登录
	                createNewSessionBase(function(){
	                    return weiliaoService.createQiangdaSession($rootScope.weiliao.getClientId(), houseId, source);
	                })
	            }
	
	            //创建新会话基本方法(包括创建抢答会话和普通会话)
	            function createNewSessionBase(ajaxCreateSession){
	
	                if(scope.helper.isCreatingSession || !$rootScope.weiliao.getIsLogin()){
	                    scope.helper.isShowWeiliaoPop = true;
	                    return;
	                }
	
	                scope.helper.isCreatingSession = true;
	                ajaxCreateSession().success(function(res){
	                    scope.helper.isCreatingSession = false;
	
	                    if(res.errno != 0){
	                        if(res.chatStatus == 'creating'){
	                            return;
	                        }
	                        if(res.chatStatus == 'over25'){     //限制会话数不能超过25个
	                            return alert(res.message);
	                        }
	                        return alert(res.message);
	                    }
	
	                    scope.helper.isShowWeiliaoPop = true;
	                    loadSessionList().success(function() {
	                        sessionToTopAndNotifyLoadChatList(res.data.objectId, scope.sessionList);
	                    });
	
	                }).error(function(){
	                    scope.helper.isCreatingSession = false;
	                });
	            }
	
	            function sessionToTopAndNotifyLoadChatList(sessionId, sessionList){
	                var findIdx = weiliaoService.findSessionIdxBySessionId(sessionId, sessionList);
	                if(findIdx !== -1) {
	                    weiliaoService.updateSession(findIdx, sessionList);
	                    var findSession = sessionList[0];
	
	                    //恢复删除会话
	                    weiliaoService.recoverDeletedSessionOnMessage(findSession, $rootScope.weiliao.getClientId());
	
	                    //清空消息数为0
	                    findSession.unreadCount = 0;
	                    weiliaoUtils.syncLocalUnreadCount($rootScope.weiliao.getClientId(), findSession.objectId, 0);
	                    $rootScope.weiliao.currentSession = findSession;
	
	                    //触发加载聊天列表
	                    $rootScope.$broadcast('trigerLoadChatList', findSession);
	                }
	            }
	        }
	    }
	}])

/***/ },
/* 7 */
/*!***********************************************!*\
  !*** ./weiliao/directive/weiliaoDirective.js ***!
  \***********************************************/
/***/ function(module, exports) {

	/**
	 * Created by zhangliguang on 16/6/4.
	 */
	(function(){
	    angular.module('weiliaoApp').directive('sessionInfo', ['$rootScope', 'weiliaoService', 'weiliaoUtils', function($rootScope, weiliaoService, weiliaoUtils){
	            return {
	                restrict: 'EA',
	                scope: {
	                    sessionList: '=',
	                    session: '=',
	                    deleteCallback: '&'
	                },
	                template: '<div class="lianjiaim-body-item" ng-class="{\'del\': isShowDeletePop, offline: isLeave(session.user)}" ng-mouseover="isShowDeleteBtn=true" ng-mouseout="isShowDeleteBtn=false">\
	                            <div class="im-item-show clear">\
	                                <table>\
	                                    <tbody>\
	                                        <tr>\
	                                            <td class="im-item-avatar">\
	                                                <img ng-if="isQiangdaSession(session) && (isQiangdaSessionStart(session) || isQiangdaSessionProgress(session) || isQiangdaSessionFail(session))" class="lj-lazy" src="http://sh.lianjia.com/public/img/weiliao/noimg.jpg" width="40" height="40">\
	                                                <img ng-if="(!isQiangdaSession(session) || isQiangdaSession(session) && (isQiangdaSessionSuccess(session) || isQiangdaSessionFinish(session))) && session.user.agent" class="lj-lazy" ng-src="{{session.user.ucAvatar}}" width="40" height="40"\
	                                                    onerror="this.src=headerParameters.publichost + \'/public/img/weiliao/noimg.jpg\'">\
	                                                <img ng-if="(!isQiangdaSession(session) || isQiangdaSession(session) && (isQiangdaSessionSuccess(session) || isQiangdaSessionFinish(session))) && !session.user.agent" class="lj-lazy" ng-src="{{session.user.ucAvatar}}" width="40" height="40"\
	                                                    onerror="this.src=headerParameters.publichost + \'/public/img/weiliao/sprite_user.png\'">\
	                                                <i ng-if="session.unreadCount > 0">{{session.unreadCount}}</i>\
	                                            </td>\
	                                            <td class="im-item-cont">\
	                                                <span class="name">\
	                                                    <span ng-class="{\'lianjiaim-blue\': isQiangdaSessionProgress(session)}" style="font-weight: {{isQiangdaSessionProgress(session) && 100 || 700}};">{{session | displaySessionName | displayElipse}}<span style="display:inline;font-weight: normal;" ng-if="isQiangdaSessionSuccess(session) && session.user.agent" class="lianjiaim-blue">[为您服务]</span></span>\
	                                                </span>\
	                                                <span class="text">{{session.attr.lastMessage}}</span>\
	                                            </td>\
	                                        </tr>\
	                                    </tbody>\
	                                </table>\
	                                <div class="im-item-time" ng-hide="isShowDeleteBtn">{{formatChatDate(normalizeDate(session.updatedAt), true)}}</div>\
	                                <a class="im-item-delbtn" title="删除" style="display: {{(isShowDeleteBtn && !isQiangdaSessionProgress(session)) && \'block\' || \'\'}}" ng-click="showDeletePop($event)">×</a>\
	                                <div class="im-item-delete clear" ng-click="clickDeletePop($event)">\
	                                        <div>\
	                                            <span class="title">确定删除？</span>\
	                                            <span class="cont">删除后将不可恢复</span>\
	                                        </div>\
	                                        <div class="im-item-delbtnwrap">\
	                                            <a class="im-btn" title="确定" ng-click="deleteSession($index, $event)">确定</a>\
	                                            <a class="im-btn" title="取消" ng-click="cancelDelete($event)">取消</a>\
	                                        </div>\
	                                </div>\
	                            </div>\
	                        </div>',
	                link: function(scope, el, attrs){
	                    scope.isLeave = weiliaoService.isLeave;
	
	                    scope.normalizeDate = weiliaoUtils.normalizeDate;
	                    scope.formatChatDate = weiliaoUtils.formatChatDate;
	                    scope.isQiangdaSession = weiliaoService.isQiangdaSession;
	                    scope.isQiangdaSessionStart = weiliaoService.isQiangdaSessionStart;
	                    scope.isQiangdaSessionProgress = weiliaoService.isQiangdaSessionProgress;
	                    scope.isQiangdaSessionSuccess = weiliaoService.isQiangdaSessionSuccess;
	                    scope.isQiangdaSessionFail = weiliaoService.isQiangdaSessionFail;
	                    scope.isQiangdaSessionFinish = weiliaoService.isQiangdaSessionFinish;
	
	                    scope.showDeletePop = function($event){
	                        $event.stopPropagation();
	                        scope.isShowDeletePop = true;
	                    };
	
	                    scope.cancelDelete = function($event){
	                        $event.stopPropagation();
	                        scope.isShowDeletePop = false;
	                    };
	
	                    scope.deleteSession = function(idx, $event){
	                        $event.stopPropagation();
	                        scope.isShowDeletePop = false;
	                        scope.session.isDeleted = true;
	                        weiliaoUtils.syncLocalIsDeleted($rootScope.weiliao.getClientId(), scope.session.objectId, true); //同步localstorage
	
	                        $rootScope.$broadcast('deleteSessionSuccess', scope.session.objectId);
	                    };
	
	                    scope.clickDeletePop = function($event){
	                        $event.stopPropagation();
	                    };
	                }
	            }
	        }])
	        .directive('chatList', ['$filter', '$rootScope', '$timeout', 'weiliaoService', 'weiliaoUtils', function($filter, $rootScope, $timeout, weiliaoService, weiliaoUtils){
	            return {
	                restrict: 'EA',
	                scope: {
	                    list: '=',
	                },
	                template: '<li class="chat-block clear" ng-repeat="chat in list | filter:filterChat"  ng-class="{\'chat-in\': clientId != chat.fromPeerId, \'chat-out\': clientId == chat.fromPeerId}">\
	                                <p class="chat-time" style="margin-bottom: 16px;" ng-if="isShowChatDate(chat.timestamp, list[$index-1].timestamp)">{{formatChatDate(chat.timestamp)}}</p>\
	                                <div class="chat-avatar">\
	                                    <a ng-href="{{publichost}}/jingjiren/detail/{{chat.fromPeerId}}.html" ng-click="clickAvatar(chat, $event)" target="_blank" ng-mouseover="isHoverAvatar=true" ng-mouseout="isHoverAvatar=false" ng-class="{\'jingjiren\': isActiveAgent(chat) && isHoverAvatar}">\
	                                        <!--<div broker-cart ng-if="isAgent(chat) && chat.isShowCard==true" ng-mouseover="showCard(chat)"></div>-->\
	                                        <img ng-src="{{parseHeadPhoto(chat)}}"  width="34" height="34">\
	                                    </a>\
	                                </div>\
	                                <div class="chat-content">\
	                                    <span ng-if="chat.text && !chat.houseCard && !chat.url"><span ng-if="!isUrl(chat.text)">{{chat.text}}</span><a ng-href="{{chat.text}}" target="_blank" ng-if="isUrl(chat.text)" style="text-decoration: underline;">{{chat.text}}</a></span>\
	                                    <a ng-if="chat.url" ng-href="{{chat.url}}" target="_blank">\
	                                        <img ng-src="{{chat.url}}">\
	                                    </a>\
	                                    <a ng-if="chat.houseCard" class="im-housecard" ng-href="{{chat.houseCard.houseurl}}" ng-click="clickChat(chat, $event)" target="_blank" title="{{chat.houseCard.title}}">\
	                                        <span style="position: relative;">\
	                                        <img class="lj-lazy js_houseImg" ng-src="{{getHouseImg(chat.houseCard)}}" onerror="this.src=headerParameters.publichost + \'/public/img/weiliao/default_block.png\'" alt="{{chat.houseCard.title}}" style="width:54px;height:54px;">\
	                                        <p class="xia-jia-tag\" ng-if="chat.houseCard.putAway == 0">已下架</p>\
	                                        </span>\
	                                        <span class="im-housecard-detail" ng-class="{\'xia-jia\': chat.houseCard.putAway == 0}">\
	                                            <span class="im-housecard-title">{{chat.houseCard.title}}</span>\
	                                            <span class="im-housecard-describe"><em>{{chat.houseCard.room}}室{{chat.houseCard.hall}}厅</em><em>{{chat.houseCard.acreage}}㎡</em><em>{{chat.houseCard.face}}</em></span>\
	                                            <span class="im-housecard-price"><span ng-if="chat.houseCard.dataType == \'rent\'">{{chat.houseCard.rentPrice}}元/月</span><span ng-if="chat.houseCard.dataType != \'rent\'">{{chat.houseCard.showPrice}}万</span></span>\
	                                        </span>\
	                                    </a>\
	                                </div>\
	                            </li>',
	                link: function(scope, el, attrs){
	                    scope.publichost = $rootScope.config["publichost"];
	                    scope.apihost = $rootScope.config["apihost"];
	                    scope.clientId = $rootScope.weiliao.getClientId();
	
	                    //两条记录间隔在5分钟内不显示聊天时间
	                    scope.isShowChatDate = weiliaoUtils.moreThanFiveMinute;
	
	                    scope.formatChatDate = weiliaoUtils.formatChatDate;
	                    scope.isUrl = weiliaoUtils.isValidUrl;
	
	                    //解析聊天人的头像信息
	                    scope.parseHeadPhoto = function(chat){
	                        if($rootScope.weiliao.getClientId() == chat.fromPeerId){
	                            return $rootScope.weiliao.getLoginUser().img;
	                        }else{
	                            return $rootScope.weiliao.getCurrentSession() &&
	                                $rootScope.weiliao.getCurrentSession().user &&
	                                $rootScope.weiliao.getCurrentSession().user.ucAvatar;
	                        }
	                    };
	
	                    scope.clickChat = function(chat, $event){
	                        if(chat && chat.houseCard && chat.houseCard.putAway === 0){
	                            $event.preventDefault();
	                            return false;
	                        }
	
	                        //如是用户点的，记录用户点击状态（已查看）
	                        if(!$rootScope.weiliao.loginUser.isAgent && chat && chat.houseCard){
	                            var convId = $rootScope.weiliao.currentSession.objectId; //会话ID
	                            var messageId = chat.msgId; //消息ID
	                            var params = '';
	                            if(chat.houseCard.dataType == 'rent'){//租房
	                                var urlPart = 'webchat/getRentMsg?checkPutAway=1';
	                                params += '&houseRentId=' + chat.houseCard.houseRentId;
	                            }
	                            else{//二手房
	                                var urlPart = 'webchat/isPutAway?type=1';
	                                params += '&houseId=' + chat.houseCard.houseSellId;
	
	                            }
	                            params += '&convId=' + convId + '&messageId=' + messageId + "&timestamp=" + chat.timestamp;
	                            weiliaoService.setHouseCardClicked(urlPart, params);
	                        }
	                    };
	
	                    scope.isActiveAgent = function(chat){
	                        return scope.clientId !== chat.fromPeerId && weiliaoService.isActiveAgent($rootScope.weiliao.getCurrentSession().user);
	                    };
	
	                    scope.clickAvatar = function(chat, $event){
	                        if(!scope.isActiveAgent(chat)){
	                            $event.preventDefault();
	                            return false;
	                        }
	                    };
	
	                    scope.showCard = function(chat){
	                        $timeout(function(){ chat.isShowCard = true; });
	                    };
	
	                    scope.filterChat = function(chat){
	                        return chat.fromPeerId !== 'sys';
	                    };
	
	                    scope.getHouseImg = function(houseCard){
	                        return  houseCard && houseCard.mainPhotoUrl ? houseCard.mainPhotoUrl : headerParameters.publichost + '/public/img/weiliao/default_block.png';
	                    }
	                }
	            }
	    }]).directive('brokerCart', ['$http', '$rootScope', function($http, $rootScope){
	        return {
	            restrict: 'EA',
	            replace: true,
	            template: '<div class="lianjiaim-personcard">\
	                                <div class="im-personcard-top clear">\
	                                    <div class="im-personcard-avatar">\
	                                        <img ng-src="{{brokerInfo.avatar}}" width="78" height="78">\
	                                    </div>\
	                                    <div class="im-personcard-detail" style="text-align: left;">\
	                                        <div class="im-personname-wrap">\
	                                            <span class="im-personname">{{brokerInfo.userName}}</span>\
	                                            <span class="im-gray position">{{brokerInfo.positionName}}</span>\
	                                        </div>\
	                                        <div>\
	                                            <span class="im-gray">主营板块：</span>\
	                                            <span class="im-pcard-district">{{brokerInfo.district || \'暂无\'}}</span>\
	                                        </div>\
	                                        <div>\
	                                            <span class="im-gray">所属门店：</span>\
	                                            <span class="im-pcard-store">{{brokerInfo.orgName || \'暂无\'}}</span>\
	                                        </div>\
	                                        <div>\
	                                            <span class="im-gray">从业年限：</span>\
	                                            <span class="im-pcard-workage">{{brokerInfo.joinDate | formatWorkExperience}}</span>\
	                                        </div>\
	                                    </div>\
	                                </div>\
	                                <div class="im-personcard-bottom">\
	                                    <table>\
	                                        <tbody>\
	                                            <tr>\
	                                                <td>\
	                                                    <span>累计成交：</span>\
	                                                    <span class="im-red im-pcard-totaldeal">{{brokerInfo.houseSoldCount || \'暂无\'}}</span>\
	                                                </td>\
	                                                <td>\
	                                                    <span>月总带看：</span>\
	                                                    <span class="im-red im-pcard-monthshow">{{brokerInfo.lookRecordCount || \'暂无\'}}</span>\
	                                                </td>\
	                                            </tr>\
	                                        </tbody>\
	                                    </table>\
	                                </div>\
	                    </div>',
	            link: function(scope, el, attrs){
	                //weiliaoService.loadEmpInfo($rootScope.weiliao.getCurrentSession().user.userCode, function(res){
	                    scope.brokerInfo = $rootScope.brokerInfo;
	                //});
	
	                var position = el.next('img').position(),
	                    selfTop = position.top + 5,
	                    selfLeft = position.left + 17;
	
	                el.css('top',selfTop +'px');
	                el.css('left',selfLeft + 'px');
	            }
	        }
	    }]).directive('fileUploader', ['$rootScope', '$timeout', 'weiliaoService', function($rootScope, $timeout, weiliaoService){
	        return {
	            restrict: 'EA',
	            template: '<input type="hidden" name="attachIds" class="js_attachIds">\
	                        <input type="file" class="js_trueBtn hideit" accept="image/jpeg,application/pdf" multiple="">\
	                        <a class="im-input-insertpic js_insertPic" title="插入图片">插入图片</a>',
	            scope: {
	                currentRoom: '=',
	                clist: '='
	            },
	            link: function(scope, el) {
	                var fakeBtn = el.find('.js_insertPic'),
	                    trueBtn = el.find('.js_trueBtn');
	
	                fakeBtn.click(function(){
	                    trueBtn.click();
	                });
	                trueBtn.change(function(){
	                    new $.fn.dui.FilesUploader(this.files, $rootScope.weiliao.fsDomain + '/store', {
	                        streamNameAilas: 'file',
	                        params: {
	                            domain: 'lianjia',
	                            category: 'IMAGE'
	                        },
	                        successCallback: function(res){
	                            if(!res.virtualPath){
	                                return;
	                            }
	
	
	                            var url = $rootScope.weiliao.fsDomain + '/fetch/vp/lianjia/img/' + res.virtualPath;
	
	                            //判断改会话中, 是不是第一次发消息
	                            if(!scope.clist || scope.clist.length === 0){
	                                weiliaoService.setQiangDaProgressStatus();
	                            }
	
	                            scope.currentRoom.send({
	                                text: '[图片]',
	                                attr: weiliaoService.appAddedProperty(),
	                                url: url,
	                                metaData: {
	                                    name: 'logo',
	                                    format: 'jpg',
	                                    height: 100,
	                                    width: 100,
	                                    size: 888
	                                }
	                            },
	                            { type: 'image' },
	                            function (res) {
	                                scope.currentRoom.update({
	                                    attr: weiliaoService.buildAttr('[图片]', $rootScope.weiliao.getLoginUser(), $rootScope.weiliao.currentSession)
	                                }, function () {
	                                    $timeout(function(){
	                                        scope.clist.push({
	                                            fromPeerId: $rootScope.weiliao.getClientId(),
	                                            timestamp: res.t,
	                                            url: url
	                                        });
	                                        weiliaoService.chatRoomScrollToButtom();
	
	                                        //更新session列表
	                                        $rootScope.$broadcast('sendMessageAndUpdateSession', '[图片]', res.t);
	                                    });
	                                })
	                            }); //sendMsg
	
	                        }//successCallback
	                    }).upload();    //upload end
	                    this.value = '';
	                });//change event end
	            }//link end
	        }
	    }]).directive('inputEnter', ['$parse', '$timeout', function($parse, $timeout) {
	        return function(scope, element, attr) {
	            var fn = $parse(attr['inputEnter']);
	            element.bind('keyup', function(event) {
	                if(event.keyCode == 13){
	                    $timeout(function() {
	                        fn(scope, {$event:event});
	                    });
	                }
	            });
	        };
	    }])
	
	}());

/***/ }
/******/ ]);
//# sourceMappingURL=weiliao.min.js.map